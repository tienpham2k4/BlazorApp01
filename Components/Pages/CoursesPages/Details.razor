@page "/courses/details"

@using Microsoft.EntityFrameworkCore
@using BlazorApp01.Models
@inject IDbContextFactory<BlazorApp01.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Courses</h4>
    <hr />
    @if (courses is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@courses.Name</dd>
            <dt class="col-sm-2">Start Date</dt>
            <dd class="col-sm-10">@courses.StartDate</dd>
            <dt class="col-sm-2">End Date</dt>
            <dd class="col-sm-10">@courses.EndDate</dd>
            <dt class="col-sm-2">Semester Name</dt>
            <dd class="col-sm-10">@courses.Semester.Name</dd>
            <dt class="col-sm-2">Subject Name</dt>
            <dd class="col-sm-10">@courses.Subject.Name</dd>
            <dt class="col-sm-2">Lecture Name</dt>
            <dd class="col-sm-10">@courses.Lecture.Name</dd>
        </dl>
        <div>
            <a class="mx-1 btn btn-outline-success" href="@($"/courses/edit?id={courses.Id}")">Edit</a>
            <a class="btn btn-success" href="@($"/courses")">Back to List</a>
        </div>
    }
</div>

@code {
    Courses? courses;

    [SupplyParameterFromQuery]
    public int Id { get; set; }
    public List<Semesters> Semesters { get; set; } = new();
    public List<Subjects> Subjects { get; set; } = new();
    public List<BlazorApp01.Data.ApplicationUser> Lectures { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        courses = await context.Courses.Include(m => m.Semester).Include(m => m.Subject).Include(m => m.Lecture).FirstOrDefaultAsync(m => m.Id == Id);

        if (courses is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
