@page "/majors/details"

@using Microsoft.EntityFrameworkCore
@using BlazorApp01.Models
@inject IDbContextFactory<BlazorApp01.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Majors</h4>
    <hr />
    @if (majors is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@majors.Name</dd>
            <dt class="col-sm-2">Department Name</dt>
            <dd class="col-sm-10">@majors.Department.Name</dd>
        </dl>
        <div>
            <a class="mx-1 btn btn-outline-success" href="@($"/majors/edit?id={majors.Id}")">Edit</a>
            <a class="btn btn-success" href="@($"/majors")">Back to List</a>
        </div>
    }
</div>

@code {
    Majors? majors;

    [SupplyParameterFromQuery]
    public int Id { get; set; }
    public List<Departments> Departments { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        majors = await context.Majors.Include(m=>m.Department).FirstOrDefaultAsync(m => m.Id == Id);

        if (majors is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
