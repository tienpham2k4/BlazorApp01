@page "/users/details"

@using Microsoft.EntityFrameworkCore
@using BlazorApp01.Models
@inject IDbContextFactory<BlazorApp01.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Users</h4>
    <hr />
    @if (users is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@users.Name</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@users.Email</dd>
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@users.Password</dd>
            <dt class="col-sm-2">Dob</dt>
            <dd class="col-sm-10">@users.Dob</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@users.Address</dd>
            <dt class="col-sm-2">Sex</dt>
            <dd class="col-sm-10">@users.Sex</dd>
            <dt class="col-sm-2">RoleId</dt>
            <dd class="col-sm-10">@users.Role.Name</dd>
        </dl>
        <div>
            <a class="mx-1 btn btn-outline-success" href="@($"/users/edit?id={users.Id}")">Edit</a>
            <a class="btn btn-success" href="@($"/users")">Back to List</a>
        </div>
    }
</div>

@code {
    Users? users;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        users = await context.Users.Include(m =>m.Role).FirstOrDefaultAsync(m => m.Id == Id);

        if (users is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
