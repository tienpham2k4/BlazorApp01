@page "/Subjects/edit"

@using Microsoft.EntityFrameworkCore
@using BlazorApp01.Models
@inject IDbContextFactory<BlazorApp01.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Subjects</h4>
<hr />
@if (Subjects is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Subjects" OnValidSubmit="UpdateSubjects" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Subjects.Id" value="@Subjects.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Subjects.Name" class="form-control" />
                    <ValidationMessage For="() => Subjects.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="code" class="form-label">Code:</label>
                    <InputText id="code" @bind-Value="Subjects.code" class="form-control" />
                    <ValidationMessage For="() => Subjects.code" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="majorid" class="form-label">Major Name:</label>
                    <InputSelect id="majorid" @bind-Value="Subjects.MajorId" class="form-control">
                        @foreach (var department in Majors)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Subjects.MajorId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a class="btn btn-success mt-3" href="/subjects">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Subjects? Subjects { get; set; }
    public List<Majors> Majors { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Subjects ??= await context.Subjects.FirstOrDefaultAsync(m => m.Id == Id);
        Majors = await context.Majors.ToListAsync();
        if (Subjects is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSubjects()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Subjects!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SubjectsExists(Subjects!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/subjects");
    }

    bool SubjectsExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Subjects.Any(e => e.Id == id);
    }
}
